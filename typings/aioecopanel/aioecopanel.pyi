"""
This type stub file was generated by pyright.
"""

import aiohttp
from collections.abc import Callable
from dataclasses import dataclass
from typing import Any, Self, Union
from .models import DeviceDict

"""Asynchronous Python Client for Bepacom EcoPanel BACnet interface"""

@dataclass
class Interface:
    """Main class for handling BACnet Add-on."""

    host: str
    timeout: int = ...
    port: int = ...
    session: Union[aiohttp.client.ClientSession, None] = ...
    _client: Union[aiohttp.ClientWebSocketResponse, None] = ...
    _close_session: bool = ...
    _device_dict: Union[DeviceDict, None] = ...
    @property
    def connected(self) -> bool:
        """Returns True when the Interface is connected."""
        ...

    async def connect(self) -> None:
        """ "Connect to the websocket of the BACnet Add-on."""
        ...

    async def listen(self, callback: Callable[[DeviceDict], None]) -> None: ...
    async def disconnect(self) -> None:
        """Disconnect from the WebSocket of the EcoPanel."""
        ...

    async def request(
        self, uri: str = ..., method: str = ..., data: Union[dict[str, Any], None] = ...
    ) -> Any:
        """Handle a request to the EcoPanel."""
        ...

    async def update(self, full_update: bool = ...) -> DeviceDict:
        """Get all information about the device in a single call.
        This method updates all add-on information available with a single API
        call.
        Args:
            full_update: Force a full update from the add-on.
        Returns:
            add-on Device data.
        Raises:
            EcoPanelEmptyResponseError: The add-on returned an empty response.
        """
        ...

    async def write_property(
        self,
        deviceid: str,
        objectid: str,
        presentValue: Union[int, float, str, bool, None] = ...,
        outOfService: Union[bool, None] = ...,
        covIncrement: Union[int, float, None] = ...,
    ) -> None:
        """Method to write values to an object of a device."""
        ...

    async def write_property_v2(
        self,
        deviceid: str,
        objectid: str,
        propertyid: str,
        value: str | int | float | bool | None,
        array_index: int | None,
        priority: int | None,
    ) -> None:
        """Method to write values to an object of a device."""
        ...

    async def websocket_write_property(
        self,
        deviceid: str,
        objectid: str,
        presentValue: Union[int, float, str, bool, None] = ...,
        outOfService: Union[bool, None] = ...,
        covIncrement: Union[int, float, None] = ...,
    ) -> None:
        """Method to write values to an object of a device through websocket."""
        ...

    async def close(self) -> None:
        """Close open client (WebSocket) session."""
        ...

    async def __aenter__(self) -> Self:
        """Async enter.
        Returns:
            The EcoPanel object.
        """
        ...

    async def __aexit__(self, *_exc_info: Any) -> None:
        """Async exit.
        Args:
            _exc_info: Exec type.
        """
        ...
